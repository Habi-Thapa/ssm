= SimpleStateMachine

A Ruby Statemachine that focuses on events instead of states.

A state machine should help you:
- Encapsulate state,
- Guard state transitions,
- Make it trivial to add state transitions to any method.

Instead of using a DSL to define events, we use a different approach.
We have a very simple DSL to decorate existing methods with logic that guards 
state transitions.

==== example

  def activate_account(activation_code)
    if activation_code_invalid?(activation_code)
      errors.add(:activation_code, 'Invalid')
    end
  end
  event :activate_account, :pending => :active


This has a couple of advantages:
- Arguments can be passed to 'events',
- 'events' can return a value, remember, it's just a method,
- Validation errors can be set on the model if you are using ActiveRecord / ActiveModel,
- Encapsulate state transitions (no need for :guards).

To use the code, you need to do 3 things:
- extend SimpleStateMachine,
- set the initial state,
- decorate a method with the event DSL

==== Example usage

  class Lamp

    extend SimpleStateMachine

    def initialize
      self.state = :off
    end

    def push_button1
      puts "click1: #{state}"
    end
    event :push_button1, :off => :on,
                         :on  => :off

    def push_button2
      puts "click1: #{state}"
    end
    event :push_button2, :off => :on,
                         :on  => :off

  end

This code was just released, we do not claim it to be stable.

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Marek & Petrik. See LICENSE for details.
