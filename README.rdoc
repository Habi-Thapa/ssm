= SimpleStateMachine

A Ruby Statemachine that focuses on events instead of states.

A state machine should help you:
- Encapsulate state,
- Guard state transitions,
- Make it trivial to add state transitions to any method.

Instead of using a DSL to define events, we use a different approach.
We have a simple DSL to decorate existing methods with logic that guards 
state transitions.

==== example

  def activate_account(activation_code)
    if activation_code_invalid?(activation_code)
      errors.add(:activation_code, 'Invalid')
    end
  end
  event :activate_account, :pending => :active


This has a couple of advantages:
- Encapsulate state transitions (no need for :guards),
- Arguments can be passed to 'events',
- 'events' can return a value it's just a method,
- Validation errors can be set on the model if you are using ActiveRecord / ActiveModel,

== Example

To use the code:
- extend SimpleStateMachine,
- set the initial state,
- decorate a method with the event DSL

  class LampWithHotelSwitch

    extend SimpleStateMachine

    def initialize
      self.state = :off
    end

    def push_switch_1
      puts 'pushed switch 1 #{state}'
    end
    event :push_switch_1, :off => :on,
                          :on  => :off

    def push_switch_2
      puts 'pushed switch 2 #{state}'
    end
    event :push_switch_2, :off => :on,
                          :on  => :off

  end

== ActiveRecord Example

To add a state machine with ActiveRecord persistence:
- extend SimpleStateMachine::ActiveRecord,
- set the initial state in after_initialize,
- decorate a method with the event DSL

  class User < ActiveRecord::Base
    
    extend SimpleStateMachine::ActiveRecord
    
    def after_initialize
      self.state ||= 'new'
      # if you get an ActiveRecord::MissingAttributeError
      # you'll probably need to do (http://bit.ly/35q23b):
      #   write_attribute(:state, "new") unless read_attribute(:state)
    end
    
    def invite
      self.activation_code = Digest::SHA1.hexdigest("salt #{Time.now.to_f}")
      #send_activation_email
    end
    event :invite, :new => :invited
    
    def confirm_invitation activation_code
      if self.activation_code != activation_code
        errors.add 'activation_code', 'is invalid'
      end
    end
    event :confirm_invitation, :invited => :active

  end

This generates the following methods
- {event}_and_save  works like save
- {event}_and_save! works like save!
- {event}!          works the same as {event}_and_save! 
- {state}?          whether or not the current state is {state}


This code was just released, we do not claim it to be stable.

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Marek & Petrik. See LICENSE for details.
