= SimpleStateMachine

A Ruby Statemachine that focuses on events instead of states.
Instead of using a DSL to define events, we decorate existing methods with checks to see if state transitions are allowed.

This has a couple of advantages:
- Arguments can be passed to events
- Validation errors can be set on the model if your using ActiveRecord
- Encapsulate state transitions. (No need for :guards)

  
  class Lamp

    attr_reader :state

    extend SimpleStateMachine

    def initialize
      @state = :off
    end

    def push_button1
      puts 'click1'
      puts @state
    end
    event :push_button1, :off => :on, 
                         :on  => :off

    def push_button2
      puts 'click2'
      puts @state
    end
    event :push_button2, :off => :on,
                         :on  => :off

  end


== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Petrik. See LICENSE for details.
